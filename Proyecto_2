-- Ejercicio 1

data Carrera = Matematica | Fisica | Computacion | Astronomia deriving (Eq, Show)

titulo :: Carrera -> String
titulo Matematica = "Licenciatura en Matemática"
titulo Fisica = "Licenciatura en Física"
titulo Computacion = "Licenciatura en ciencias de la computación"
titulo Astronomia = "Licenciatura en Astronomía"
 

data NotaBasica = Do | Re | Mi | Fa | Sol | La | Si
    deriving (Eq, Ord, Show)

               

cifradoAmericano :: NotaBasica -> Char
cifradoAmericano Do = 'C'
cifradoAmericano Re = 'D'
cifradoAmericano Mi = 'E'
cifradoAmericano Fa = 'F'
cifradoAmericano Sol = 'G'
cifradoAmericano La = 'A'
cifradoAmericano Si = 'B'


-- Ejercicio 3.a

minimoElemento :: Ord a => [a] -> a
minimoElemento [x] = x
minimoElemento (x:xs) = x `min` minimoElemento xs


--Ejercicio 3.b

minimoElemento' :: (Bounded a, Ord a, Show a) => [a] -> a
minimoElemento' [] = maxBound
minimoElemento' (x:xs) = min x (minimoElemento' xs)



-- Ejercicio 4.a


data Cargo = Titular | Asociado | Adjunto | Asistente | Auxiliar deriving (Show, Eq)
data Area = Administrativa | Ensenanza | Economica | Postgrado deriving (Show, Eq)


data Persona = Decano
           | Docente Cargo
           | NoDocente Area
           | Estudiante Carrera Ingreso deriving (Show, Eq)


type Ingreso = Int


--Ejercicio 4.b

--Docente :: Cargo -> Persona

--Ejercicio 4.c


mismoCargo:: Cargo -> Cargo -> Bool
mismoCargo Titular Titular = True
mismoCargo Asociado Asociado = True
mismoCargo Adjunto Adjunto = True
mismoCargo Asistente Asistente = True
mismoCargo Auxiliar Auxiliar = True
mismoCargo _ _ = False



cuantos_doc :: [Persona] -> Cargo -> Int
cuantos_doc [] c = 0
cuantos_doc (Docente c1:xs) c | mismoCargo c c1 = 1 + cuantos_doc xs c
                              | otherwise =  cuantos_doc xs c
cuantos_doc (_:xs) c = cuantos_doc xs c


--Ejercicio 4.d

cuantos_doc':: [Persona] -> Cargo -> Int
cuantos_doc' [] c = 0
cuantos_doc' (x:xs) c = length(filter (==Docente c) (x:xs))


--Ejercicio 5.a

data Alteracion = Bemol | Sostenido | Natural
data NotaMusical = Nota NotaBasica Alteracion


sonido :: NotaBasica -> Int
sonido Do = 1
sonido Re = 3
sonido Mi = 5
sonido Fa = 6
sonido Sol = 8
sonido La = 10
sonido Si = 12


--Ejercicio 5.b

alteracion :: NotaBasica -> Alteracion -> Int
alteracion nb Bemol = (sonido nb - 1)
alteracion nb Sostenido = (sonido nb + 1)
alteracion nb Natural = (sonido nb)


sonidoCromatico :: NotaMusical -> Int
sonidoCromatico (Nota n a) = (alteracion n a)



--Ejercicio 5.c


instance Eq NotaMusical
  where
     n1 == n2 = sonidoCromatico n1 == sonidoCromatico n2


--Ejercicio 5.d

instance Ord NotaMusical
  where
    n1 <= n2 = sonidoCromatico n1 <= sonidoCromatico n2


--Ejercicio 6.a


primerElemento :: [a] -> Maybe a
primerElemento [] = Nothing
primerElemento (x:xs) = Just x


--Ejercicio 7.a

data Cola = VaciaC | Encolada Persona Cola deriving Show

atender :: Cola -> Maybe Cola
atender VaciaC = Nothing
atender (Encolada a c) = Just c

encolar :: Persona -> Cola -> Cola
encolar p VaciaC = Encolada p VaciaC
encolar p (Encolada a as) = (Encolada a(encolar p as))
 
busca :: Cola -> Cargo -> Maybe Persona
busca VaciaC cargo = Nothing
busca (Encolada a c) cargo | a == Docente cargo = Just a
                           | a /= Docente cargo = busca c cargo



--Ejercicio 7.b 

--El tipo Cola se parece al tipo lista


--Ejercicio 8.a

data ListaAsoc a b = Vacia | Nodo a b (ListaAsoc a b)

type Diccionario = ListaAsoc String String
type Padron = ListaAsoc Int String


type GuiaTelefonica = ListaAsoc String Int


--Ejercicio 8.b
--1

la_long :: ListaAsoc a b -> Int 
la_long Vacia = 0
la_long (Nodo a b (xs)) = 1 + (la_long xs)

--2

la_concat :: ListaAsoc a b -> ListaAsoc a b -> ListaAsoc a b 
la_concat Vacia xs = xs 
la_concat (Nodo a b (xs)) ys = ((Nodo a b (la_concat xs ys)))

--3

la_agregar :: ListaAsoc a b -> a -> b -> ListaAsoc a b 
la_agregar xs p s = (Nodo p s (xs))

--4

la_pares :: ListaAsoc a b -> [ (a,b) ]
la_pares Vacia = []
la_pares (Nodo p s (xs)) = (p,s) : (la_pares xs)

--5

la_busca :: Eq a => ListaAsoc a b -> a -> Maybe b 
la_busca Vacia clave = Nothing 
la_busca (Nodo p s (xs)) clave 
              |p == clave = Just s 
              |otherwise = la_busca xs clave 

--6

la_borrar :: Eq a => a -> ListaAsoc a b -> ListaAsoc a b 
la_borrar b Vacia = Vacia 
la_borrar b (Nodo p s(xs))
          | b == p = xs 
          | otherwise = (Nodo p s(la_borrar b xs)) 




--Ejercicio 9

data Arbol a = Hoja | Rama (Arbol a) a (Arbol a) deriving Show

type Prefijos = Arbol String
can , cana , canario , canas , cant , cantar , canto :: Prefijos
can = Rama cana "can" cant
cana = Rama canario "a" canas
canario = Rama Hoja "rio" Hoja
canas = Rama Hoja "s" Hoja
cant = Rama cantar "t" canto
cantar = Rama Hoja "ar" Hoja
canto = Rama Hoja "o" Hoja


--Ejercicio 9.a

a_long :: Arbol a -> Int
a_long Hoja = 0
a_long (Rama a _ b) = 1 + a_long a + a_long b

--Ejercicio 9.b

a_hojas :: Arbol a -> Int
a_hojas Hoja = 1
a_hojas (Rama a _ b) = a_hojas a + a_hojas b


--Ejercicio 9.c

a_inc :: Num a => Arbol a -> Arbol a
a_inc Hoja = Hoja
a_inc (Rama a n b) = Rama (a_inc a) (n+1) (a_inc b)


--Ejercicio 9.d

a_map :: (a -> b) -> Arbol a -> Arbol b
a_map _ Hoja = Hoja
a_map fun (Rama a x b) = Rama (a_map fun a) (fun x) (a_map fun b)
